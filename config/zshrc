# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="lambda"
ZSH_THEME="afowler"
# Set this theme up later, needs powerline font hacking
#ZSH_THEME="agnoster"
#DEFAULT_USER="sensae"

# zsh settings
unsetopt nomatch

# Man page colorization
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)


# ------------------------------------------------------------------------------
## Platform specific environment configuration
# ------------------------------------------------------------------------------

case $(uname -s) in
  Linux)
    export OS="linux"
    if [ $(lspci | grep -i virtualbox | wc -l) -gt 0 ]; then
      echo "Virtualbox guest detected, not enabling certain options."
    else
      plugins=(git)
    fi
    export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/bin/core_perl
    if [ -d '/home/sensae/bin' ]
    then
      PATH=/home/sensae/bin:$PATH # This entry is first for load order reasons
    fi
    if [ -d '/home/sensae/opt/android-studio' ]
    then
      PATH=$PATH:/home/sensae/opt/android-studio/bin
      PATH=$PATH:/home/sensae/opt/android-studio/sdk/platform-tools
      PATH=$PATH:/home/sensae/opt/android-studio/sdk/tools
    fi
    if [ $(which keychain &> /dev/null) ]
    then
      eval $(keychain --eval --agents ssh -Q --quiet id_rsa)
    fi

    #distro specific
    if [ -e /etc/debian_version ]
    then
      export distro="debian"
      alias i="sudo aptitude install"
      alias s="aptitude search"
      alias u="sudo aptitude upgrade"
    elif [ -e /etc/arch-release ]
    then
      export distro="arch"
      alias i="sudo pacman -S"
      alias s="pacman -Ss"
      alias u="sudo pacman -Syyu; pacman -Qu | wc -l > ~/.paccount"
      alias setdefault="xdg-mime default"
      alias aurdir="cd /var/abs/local"
      alias wifi="sudo wifi-menu wlp4s0"
    fi
  ;;
  Darwin)
    export OS="darwin"
    plugins=(git osx)
    export PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/git/bin:/usr/X11/bin
    alias i="brew install"
    alias s="brew search"
    alias u="brew update"
  ;;
  *)
    OS="unknown"
    echo "Warning: Unable to detect operating system type."
  ;;
esac

source $ZSH/oh-my-zsh.sh

#rvm
export PATH=$PATH:$HOME/.rvm/bin
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

#$editor
if [ -e $(which vim &> /dev/null) ]
then
  export EDITOR=vim
fi

#less syntax highlighting
export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
export LESS=' -R '

#save current working directory
function cd {
  builtin cd $@
  pwd > ~/.last_dir
}

# restore current working directory
if [ -f ~/.last_dir ]
then
  cd `cat ~/.last_dir`
fi

#z
. $HOME/bin/z.sh
function precmd () {
  z --add "$(pwd -P)"
}

# ------------------------------------------------------------------------------
## User helper functions
# ------------------------------------------------------------------------------

function sync_music_dbox () {
  local source=$HOME/music/ # Trailing slash vital, copies contents of dir
  local destination=$HOME/Dropbox/Music
  if [ ! -e $source ]; then
    echo "Directory $source does not exist, not copying files.."
  elif [ ! -e $destination ]; then
    echo "Directory $destination does not exist, not copying files.."
  elif [ -d $source ] && [ -d $destination ]; then
    echo "Syncing $source to $destination"
    rsync -vazh $source $destination
  else
    echo "General failure synchronizing music to Dropbox folder."
  fi
}

function template () {
  local target=$HOME/Templates/$1
  local working_dir=$(pwd)
  if [[ $# -eq 1 ]] && [ -e $target ]; then
    echo "Copying $target to $working_dir"
    cp $target $working_dir
  else
    echo "General failure copying template."
  fi
}

function todo () {
  if [ -e "todo.txt" ]; then
    echo "\033[32mFound todo.txt:\033[0m"
    sed -n 's/^/ \* /p' todo.txt
  fi
}

alias vitodo="vim todo.txt"

function greptodo () {
  grep -IR "#TODO" .
}

function findtodo () {
  find . -name "todo.txt" -exec sh -c 'echo "\n{}"; sed -n "s/^/ \* /p" {}' \;
}

function needs () {
  if [ ! -e "todo.txt" ]; then
    touch todo.txt
  fi
  if [ -n "$1" ]; then
    echo "Appending to todo.txt: $@"
    echo "$@" >> todo.txt
  fi
}

# ------------------------------------------------------------------------------
## Ruby functions
# ------------------------------------------------------------------------------

RUBY_LIB="$MY_RUBY_HOME/lib/ruby/"

# Searches locally installed ruby standard library for files
function rbfind {
  echo "Looking for *$1*.rb files in $RUBY_LIB"
  find $RUBY_LIB -name "*$1*.rb" -printf '%h/\033[1;32m%f\033[0m\n'
}

# Greps through locally installed ruby standard library files for string
function rbgrep {
  local rbdir="$MY_RUBY_HOME/lib/ruby/"
  echo "Grepping through files in $RUBY_LIB for pattern $1"
  grep -inR $1 $RUBY_LIB
}

# ------------------------------------------------------------------------------
## Non-System Aliases
# ------------------------------------------------------------------------------

#general
case $OS in
  linux)
    alias ls="ls -F --color"
    alias la="ls -aF --color"
    alias ll="ls -lF --color"
    alias lla="ls -alF --color"
    alias lh="ls -lFh"
  ;;
  darwin)
    alias ls="ls -FG"
    alias la="ls -aFG"
    alias ll="ls -lFG"
    alias lla="ls -alFG"
    alias lh="ls -lFh"
  ;;
esac

alias encmount="encfs $HOME/Dropbox/encrypted $HOME/enc"
alias gpgls="gpg --list-keys"
alias gpgsls=" gpg --list-secret-keys"
alias clip="xclip -sel clip"
alias tmux="tmux -2"
alias templates="ls ~/Templates"
alias dirsizes="du -h --max-depth=1"

#git
alias gitss="git status -s"
alias gits="git status"
alias push="git push"
alias pushmaster="git push origin master"
alias pull="git pull"
alias pullmaster="git pull origin master"
alias gita="git add"
alias gitc="git commit"
alias gdiff="git diff"
alias gdiffc="git diff --cached"
alias gdiffs="git diff --stat"
alias gdiffsc="git diff --cached --stat"
glog_settings="--oneline --graph --decorate"
alias glog="git log $glog_settings"
alias gloga="git log $glog_settings --all"
alias glogv="git log $glog_settings --shortstat"

#android
alias rootadb="adb kill-server; sudo adb start-server"

#rvm
alias rlist="rvm list"
alias rglist="rvm gemset list"

#python
#TODO Rewrite into clean function
alias rmpyc="find . -name '*.pyc' -exec rm {} \;"

#rails
alias dbnuke="rake db:drop; rake db:create; rake db:migrate; rake db:test:prepare"
alias dbup="rake db:migrate; rake db:test:prepare"

#network analysis
alias locals="nmap -sP"

### Added by the Heroku Toolbelt
if [ -d /usr/local/heroku ]; then
  export PATH="$PATH:/usr/local/heroku/bin"
fi
